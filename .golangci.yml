version: "2"

linters:
  default: all
  disable:
    - godox
  exclusions:
    warn-unused: true
    rules:
      - path: _test\.go
        linters:
          - errcheck
          - funlen
  settings:
    cyclop:
      max-complexity: 20
    decorder:
      dec-order:
        - const
        - var
        - type
        - func
      disable-dec-order-check: false
      disable-init-func-first-check: false
      disable-dec-num-check: true
    depguard:
      rules:
        main:
          list-mode: strict
          allow:
            - $gostd
    errcheck:
      check-type-assertions: true
      check-blank: true
      disable-default-exclusions: false
    errorlint:
      errorf: true
      errorf-multi: true
      asserts: true
      comparison: true
    exhaustive:
      explicit-exhaustive-switch: false
      explicit-exhaustive-map: false
      default-case-required: false
      default-signifies-exhaustive: false
      package-scope-only: false
    exhaustruct:
      exclude:
        - '^github\.com/reginald-project/reginald/pkg/rpp\.Message$'
    funcorder:
      constructor: true
      struct-method: true
    funlen:
      lines: 100
      statements: 60
      ignore-comments: true
    gochecksumtype:
      default-signifies-exhaustive: false
      include-shared-interfaces: false
    gocognit:
      min-complexity: 30
    goconst:
      min-occurrences: 5
      # ignore-string-values:
      #   - "^stderr$" # TODO: check this again later, maybe the ignore should be removed
      find-duplicates: true
      eval-const-expressions: true
    gocritic:
      enable-all: true
      disabled-checks:
        - commentedOutCode
        - unnamedResult
        - whyNoLint
    gocyclo:
      min-complexity: 30
    godot:
      scope: declarations
      period: true
      capital: false
    govet:
      enable-all: true
    grouper:
      const-require-single-const: false
      const-require-grouping: false
      import-require-single-import: true
      import-require-grouping: false
      type-require-single-type: false
      type-require-grouping: false
      var-require-single-var: false
      var-require-grouping: false
    inamedparam:
      skip-single-param: true
    interfacebloat:
      max: 5 # TODO: Adjust as needed to find a good value.
    loggercheck:
      slog: true
    maintidx:
      under: 25
    makezero:
      always: false
    musttag:
      functions:
        - name: (*github.com/pelletier/go-toml/v2.Decoder).Decode
          tag: toml
          arg-pos: 0
    nestif:
      min-complexity: 5
    nlreturn:
      block-size: 1
    nolintlint:
      allow-unused: false
      allow-no-explanation:
        - lll
        - varnamelen
      require-explanation: true
      require-specific: true
    nonamedreturns:
      report-error-in-defer: true
    paralleltest:
      ignore-missing: false
      ignore-missing-subtests: false
    perfsprint:
      integer-format: true
      int-conversion: true
      error-format: true
      err-error: true
      errorf: true
      string-format: true
      sprintf1: true
      strconcat: true
      bool-format: true
      hex-format: true
    prealloc:
      simple: true
      range-loops: true
      for-loops: true
    recvcheck:
      disable-builtin: false
      exclusions: []
    revive:
      severity: error
      enable-all-rules: true
      directives:
        - name: specify-disable-reason
          severity: error
      confidence: 0.8 # default: 0.8
      rules:
        - name: add-constant
          severity: error
          disabled: true
          exclude: [""]
          arguments:
            - max-lit-count: "3"
              allow-strs: '""'
              allow-ints: "0,1,2"
              allow-floats: "0.0,0.,1.0,1.,2.0,2."
        - name: cognitive-complexity
          severity: warning
          disabled: true
          exclude: [""]
          arguments: [30]
        # This might actually be good, but we have otherwise decided to ban
        # named returns.
        - name: confusing-results
          severity: error
          disabled: true
          exclude: [""]
        - name: cyclomatic
          severity: error
          disabled: true
          exclude: [""]
          arguments: [3]
        - name: flag-parameter
          severity: error
          disabled: true
          exclude: [""]
        - name: function-length
          severity: error
          disabled: true
          exclude: [""]
          arguments: [10, 0]
        - name: line-length-limit
          severity: error
          disabled: true
          exclude: [""]
          arguments: [120]
        - name: max-public-structs
          severity: error
          disabled: true
          exclude: [""]
          arguments: [5]
        - name: struct-tag
          severity: error
          disabled: false
          exclude: [""]
          arguments:
            - "mapstructure,remain"
    sloglint:
      no-mixed-args: true
      kv-only: false
      attr-only: false
      no-global: "" # could be possible to enforce the logger as a parameter
      context: "scope" # might be worth it to change to "all"
      static-msg: true
      msg-style: lowercased
      no-raw-keys: false
      key-naming-case: "camel" # normal logging output is JSON
      forbidden-keys:
        - time
        - level
        - msg
        - source
      args-on-sep-lines: false
    staticcheck:
      dot-import-whitelist: []
      initialisms: []
      http-status-code-whitelist: []
      checks:
        - all
    tagalign:
      align: false
      sort: true
    tagliatelle:
      case:
        # Defines the association between tag name and case.
        # Any struct tag name can be used.
        # Supported string cases:
        # - `camel`
        # - `pascal`
        # - `kebab`
        # - `snake`
        # - `upperSnake`
        # - `goCamel`
        # - `goPascal`
        # - `goKebab`
        # - `goSnake`
        # - `upper`
        # - `lower`
        # - `header`
        rules:
          env: upperSnake
          flag: kebab
          json: camel
          mapstructure: kebab
        use-field-name: false
        ignored-fields: []
    testpackage:
      skip-regexp: (export|internal)_test\.go
      allow-packages: []
    thelper:
      test:
        first: true
        name: true
        begin: true
      benchmark:
        first: true
        name: true
        begin: true
      tb:
        first: true
        name: true
        begin: true
      fuzz:
        first: true
        name: true
        begin: true
    usestdlibvars:
      http-method: true
      http-status-code: true
      time-weekday: true
      time-month: true
      time-layout: true
      crypto-hash: true
      default-rpc-path: true
      sql-isolation-level: true
      tls-signature-scheme: true
      constant-kind: true
    usetesting:
      os-create-temp: true
      os-mkdir-temp: true
      os-setenv: true
      os-temp-dir: true
      os-chdir: true
      context-background: true
      context-todo: true
    unconvert:
      fast-math: true
      safe: true
    unparam:
      check-exported: true
    unused:
      field-writes-are-uses: false
      post-statements-are-reads: false
      exported-fields-are-used: false
      parameters-are-used: true
      local-variables-are-used: false
      generated-is-used: true
    varnamelen:
      max-distance: 50
      ignore-decls:
        - eg *errgroup.Group
        - g *errgroup.Group
        - id rpp.ID
        - mu sync.Mutex
        - ok bool
        - wg sync.WaitGroup
    wrapcheck:
      report-internal-errors: false
    wsl:
      strict-append: true
      allow-assign-and-call: false
      allow-assign-and-anything: false
      allow-multiline-assign: true
      force-case-trailing-whitespace: 0
      allow-trailing-comment: false
      allow-separated-leading-comment: false
      allow-cuddle-declarations: false
      allow-cuddle-with-calls:
        - Lock
        - RLock
      allow-cuddle-with-rhs:
        - Unlock
        - RUnlock
      allow-cuddle-used-in-block: false
      force-err-cuddling: true
      error-variable-names:
        - err
      force-short-decl-cuddling: false

formatters:
  enable:
    - gci
    - gofmt
    - gofumpt
    - goimports
    - golines
  settings:
    golines:
      reformat-tags: false
